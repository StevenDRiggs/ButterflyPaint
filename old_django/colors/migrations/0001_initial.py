# Generated by Django 3.2.7 on 2021-09-19 20:30

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AnalogColor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.CharField(choices=[('heavy', 'HEAVY'), ('medium', 'MEDIUM'), ('light', 'LIGHT')], default='heavy', max_length=50)),
                ('brandname', models.CharField(max_length=200)),
                ('glossiness', models.IntegerField(default=100, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('image_url', models.URLField(max_length=1000)),
                ('lightfastness', models.IntegerField(choices=[(1, 'I'), (2, 'II'), (3, 'III')], default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
                ('medium', models.CharField(choices=[('acrylic', 'ACRYLIC'), ('oil', 'OIL'), ('watercolor', 'WATERCOLOR'), ('gouache', 'GOUACHE'), ('mixed', 'MIXED'), ('dye', 'DYE'), ('pastel', 'PASTEL'), ('colored_pencil', 'COLORED PENCIL'), ('graphite', 'GRAPHITE'), ('charcoal', 'CHARCOAL'), ('liquid_graphite', 'LIQUID GRAPHITE')], max_length=50)),
                ('name', models.CharField(max_length=200)),
                ('opaqueness', models.IntegerField(default=100, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('series', models.CharField(max_length=200)),
                ('thickness', models.IntegerField(default=75, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('tinting', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='tinting / pigmentation level')),
                ('_recipe_gloss', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('_recipe_matte', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('_recipe_medium', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('_recipe_oil', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('_recipe_thinner', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('_recipe_water', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
            ],
        ),
        migrations.CreateModel(
            name='AnalogRecipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredient', to='colors.analogcolor')),
                ('origin_color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='colors.analogcolor')),
            ],
        ),
        migrations.AddField(
            model_name='analogcolor',
            name='_recipe_colors',
            field=models.ManyToManyField(related_name='_colors_analogcolor__recipe_colors_+', through='colors.AnalogRecipe', to='colors.AnalogColor'),
        ),
        migrations.AddConstraint(
            model_name='analogrecipe',
            constraint=models.UniqueConstraint(fields=('origin_color', 'ingredient'), name='unique_ingredients_for_each_color'),
        ),
        migrations.AddConstraint(
            model_name='analogcolor',
            constraint=models.UniqueConstraint(fields=('body', 'brandname', 'glossiness', 'lightfastness', 'medium', 'name', 'opaqueness', 'series', 'tinting', 'thickness'), name='unique_color'),
        ),
    ]
